{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pymata_rh A Python 3.7+ Interface For The Robo HAT MM1 What Is The Robot HAT MM1? The Robo HAT MM1 is an open-source robotics controller board designed for Single Board Computers with standard 40pin GPIO(e.g., Raspberry Pi, Jetson Nano, etc.). It is best to allow Robotics Masters to tell the Robot HAT MM1 story. What is pymata-rh? Pymata_rh is a Python 3 (Version 3.7 or above) Application Programming Interface (API) for programming the Robo HAT MM1. It is Windows, macOS, and Linux compatible. Robot HAT MM1 Pin Names To Pin Number Map And Supported Pin Modes MM1 Pin Name Digital / Analog Pin # Digital Input Digital Output PWM Analog Input Servo1 2 Yes Yes Yes No Servo2 3 Yes Yes Yes No Servo3 4 Yes Yes No No Servo4 5 Yes Yes No No Servo5 6 Yes Yes Yes No Servo6 7 Yes Yes Yes No Servo7 8 Yes Yes Yes No Servo8 9 Yes Yes Yes No NeoPixel 11 Yes Yes Yes No LED 13 No Yes No No RCC1 14 / A0 Yes Yes No Yes RCC2 15 / A1 Yes Yes No Yes RCC3 16 / A2 Yes Yes No Yes RCC4 17 / A3 Yes Yes No Yes NOTES: All digital pins support digital input pull-up mode. All analog input pins may be configured as digital inputs or outputs as well. Currently, there is no library support provided within pymata_rh to control NeoPixels. However, the pin may be used as a digital pin. API Support The API not only supports the pins and modes listed above, but the pymata_rh API also provides support for: Servo motors. The onboard INA219 current, shunt, and power monitor. The onboard MPU9250 nine-axis motion tracking device. External i2c devices. DHT 11 and 22 temperature sensors. HC-SR04 sonar distance sensors. NOTE: You may need to connect a power supply that provides adequate current capacity for your application. Implemented Using The Firmata Protocol The API is implemented using the Firmata protocol in conjunction with FirmataExpress, custom firmware you install on the Robo HAT MM1. Communication between the Python script and the Robo HAT MM1 is accomplished over a serial link at 115200 baud. Both Callbacks And Polling Are Supported To Retrieve Input Data To receive an automatic and immediate notification of input data changes, you may specify a callback method to receive updates. This is the preferred method of receiving update notifications. You may also poll for the latest reported data changes if that better meets your application's needs. Here is an example that demonstrates receiving asynchronous digital pin state data change notifications for pin 2 using callback notifications. The API is quite simple to use. Here are the steps involved in creating a simple application. Set a pin mode for the pin and register a callback function. Have your application sit in a loop waiting for notifications. When pymata_rh executes the callback method you specified, the data parameter is populated with a list of items that describe the change event, including a time-stamp. from pymata_rh import pymata_rh import time class DigitalInput: \"\"\" Set a pin for digital input and received all data changes in the callback method \"\"\" def __init__(self, pin): \"\"\" Set a pin as a digital input :param pin: digital pin number \"\"\" # Indices into the callback report data self.CB_PIN_MODE = 0 self.CB_PIN = 1 self.CB_VALUE = 2 self.CB_TIME = 3 # Instantiate this class with the pymata_rh API self.device = pymata_rh.PymataRh() # Set the pin mode and specify the callback method. self.device.set_pin_mode_digital_input(pin, callback=self.the_callback) # Keep the program running and wait for callback events. while True: try: time.sleep(1) # If user hits Control-C, exit cleanly. except KeyboardInterrupt: self.device.shutdown() def the_callback(self, data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value the pin type (digital, analog, etc.) and the date and time when the change occurred :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" # Convert the date stamp to readable format date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[self.CB_TIME])) # Print the pin, current value and time and date of the pin change event. print(f'Pin: {data[self.CB_PIN]} Value: {data[self.CB_VALUE]} Time Stamp: {date}') if __name__ == '__main__': # Monitor Pin 2 For Digital Input changes DigitalInput(2) Sample console output as input change events occur: Pin: 2 Value: 0 Time Stamp: 2020-03-10 13:26:22 Pin: 2 Value: 1 Time Stamp: 2020-03-10 13:26:27 What You Will Find In This Document A discussion of the API methods, including links to working examples. Installation and system requirements: Verifying The Python 3 Version. Python 3 Installation Instructions. Installing pymata_rh . Installing FirmataExpress On The Robo HAT MM1. Copyright (C) 2020 Alan Yorinks. All Rights Reserved. Last updated 01 September 2020 For Release v1.2","title":"What Is pymata_rh?"},{"location":"#what-is-the-robot-hat-mm1","text":"The Robo HAT MM1 is an open-source robotics controller board designed for Single Board Computers with standard 40pin GPIO(e.g., Raspberry Pi, Jetson Nano, etc.). It is best to allow Robotics Masters to tell the Robot HAT MM1 story.","title":"What Is The Robot HAT MM1?"},{"location":"#what-is-pymata-rh","text":"Pymata_rh is a Python 3 (Version 3.7 or above) Application Programming Interface (API) for programming the Robo HAT MM1. It is Windows, macOS, and Linux compatible.","title":"What is pymata-rh?"},{"location":"#robot-hat-mm1-pin-names-to-pin-number-map-and-supported-pin-modes","text":"MM1 Pin Name Digital / Analog Pin # Digital Input Digital Output PWM Analog Input Servo1 2 Yes Yes Yes No Servo2 3 Yes Yes Yes No Servo3 4 Yes Yes No No Servo4 5 Yes Yes No No Servo5 6 Yes Yes Yes No Servo6 7 Yes Yes Yes No Servo7 8 Yes Yes Yes No Servo8 9 Yes Yes Yes No NeoPixel 11 Yes Yes Yes No LED 13 No Yes No No RCC1 14 / A0 Yes Yes No Yes RCC2 15 / A1 Yes Yes No Yes RCC3 16 / A2 Yes Yes No Yes RCC4 17 / A3 Yes Yes No Yes","title":"Robot HAT MM1 Pin Names To Pin Number Map And Supported Pin Modes"},{"location":"#notes","text":"All digital pins support digital input pull-up mode. All analog input pins may be configured as digital inputs or outputs as well. Currently, there is no library support provided within pymata_rh to control NeoPixels. However, the pin may be used as a digital pin.","title":"NOTES:"},{"location":"#api-support","text":"The API not only supports the pins and modes listed above, but the pymata_rh API also provides support for: Servo motors. The onboard INA219 current, shunt, and power monitor. The onboard MPU9250 nine-axis motion tracking device. External i2c devices. DHT 11 and 22 temperature sensors. HC-SR04 sonar distance sensors. NOTE: You may need to connect a power supply that provides adequate current capacity for your application.","title":"API Support"},{"location":"#implemented-using-the-firmata-protocol","text":"The API is implemented using the Firmata protocol in conjunction with FirmataExpress, custom firmware you install on the Robo HAT MM1. Communication between the Python script and the Robo HAT MM1 is accomplished over a serial link at 115200 baud.","title":"Implemented Using The Firmata Protocol"},{"location":"#both-callbacks-and-polling-are-supported-to-retrieve-input-data","text":"To receive an automatic and immediate notification of input data changes, you may specify a callback method to receive updates. This is the preferred method of receiving update notifications. You may also poll for the latest reported data changes if that better meets your application's needs. Here is an example that demonstrates receiving asynchronous digital pin state data change notifications for pin 2 using callback notifications. The API is quite simple to use. Here are the steps involved in creating a simple application. Set a pin mode for the pin and register a callback function. Have your application sit in a loop waiting for notifications. When pymata_rh executes the callback method you specified, the data parameter is populated with a list of items that describe the change event, including a time-stamp. from pymata_rh import pymata_rh import time class DigitalInput: \"\"\" Set a pin for digital input and received all data changes in the callback method \"\"\" def __init__(self, pin): \"\"\" Set a pin as a digital input :param pin: digital pin number \"\"\" # Indices into the callback report data self.CB_PIN_MODE = 0 self.CB_PIN = 1 self.CB_VALUE = 2 self.CB_TIME = 3 # Instantiate this class with the pymata_rh API self.device = pymata_rh.PymataRh() # Set the pin mode and specify the callback method. self.device.set_pin_mode_digital_input(pin, callback=self.the_callback) # Keep the program running and wait for callback events. while True: try: time.sleep(1) # If user hits Control-C, exit cleanly. except KeyboardInterrupt: self.device.shutdown() def the_callback(self, data): \"\"\" A callback function to report data changes. This will print the pin number, its reported value the pin type (digital, analog, etc.) and the date and time when the change occurred :param data: [pin, current reported value, pin_mode, timestamp] \"\"\" # Convert the date stamp to readable format date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[self.CB_TIME])) # Print the pin, current value and time and date of the pin change event. print(f'Pin: {data[self.CB_PIN]} Value: {data[self.CB_VALUE]} Time Stamp: {date}') if __name__ == '__main__': # Monitor Pin 2 For Digital Input changes DigitalInput(2) Sample console output as input change events occur: Pin: 2 Value: 0 Time Stamp: 2020-03-10 13:26:22 Pin: 2 Value: 1 Time Stamp: 2020-03-10 13:26:27","title":"Both Callbacks And Polling Are Supported To Retrieve Input Data"},{"location":"#what-you-will-find-in-this-document","text":"A discussion of the API methods, including links to working examples. Installation and system requirements: Verifying The Python 3 Version. Python 3 Installation Instructions. Installing pymata_rh . Installing FirmataExpress On The Robo HAT MM1. Copyright (C) 2020 Alan Yorinks. All Rights Reserved. Last updated 01 September 2020 For Release v1.2","title":"What You Will Find In This Document"},{"location":"about/","text":"REPORTING ISSUES If you wish to report an issue with pymata_rh, please use this link . For FirmataExpress, please use this link . When filing an issue, please provide any console output, a description of the issue, and sample code demonstrating the problem. If you have any questions about pymata_rh or FirmataExpress, you may also use the issues links to do that as well. TROUBLESHOOTING TIPS Powering both Robot HAT MM1 connected devices (such as motors) and the Robot HAT MM1 micro-controller from your computer's USB connector or Raspberry Pi may exceed the maximum current capabilities of the USB port or the Raspberry Pi power supply. In those cases, use a separate power supply for the connected device. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"About"},{"location":"about/#reporting-issues","text":"If you wish to report an issue with pymata_rh, please use this link . For FirmataExpress, please use this link . When filing an issue, please provide any console output, a description of the issue, and sample code demonstrating the problem. If you have any questions about pymata_rh or FirmataExpress, you may also use the issues links to do that as well.","title":"REPORTING ISSUES"},{"location":"about/#troubleshooting-tips","text":"Powering both Robot HAT MM1 connected devices (such as motors) and the Robot HAT MM1 micro-controller from your computer's USB connector or Raspberry Pi may exceed the maximum current capabilities of the USB port or the Raspberry Pi power supply. In those cases, use a separate power supply for the connected device. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"TROUBLESHOOTING TIPS"},{"location":"device_writes/","text":"Setting Pin and Device Values In this section, we discuss writing data to: Digital pins. PWM pins. Servo motors. Note: I2C devices are discussed in the next section of this guide. digital_write def digital_write(self, pin, value) Set the specified pin to the specified value. :param pin: arduino pin number :param value: pin value (1 or 0) Example: digital_output.py pwm_write def pwm_write(self, pin, value) Set the selected pwm pin to the specified value. :param pin: PWM pin number :param value: Pin value (0 - 0x4000) Example: fade.py Notes: The value parameter is typically set between 0 and 255. servo_write def servo_write(self, pin, position) This is an alias for analog_write to set the position of a servo that has been previously configured using set_pin_mode_servo. :param pin: arduino pin number :param position: servo position Example: servo.py Notes: For an angular servo, the position parameter is set between 0 and 180 (degrees). For a continuous servo, 0 is full-speed in one direction, 180 is full speed in the other, and a value near 90 is no movement. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Writing Values To Pins And Selected Devices"},{"location":"device_writes/#setting-pin-and-device-values","text":"In this section, we discuss writing data to: Digital pins. PWM pins. Servo motors. Note: I2C devices are discussed in the next section of this guide.","title":"Setting Pin and Device Values"},{"location":"device_writes/#digital_write","text":"def digital_write(self, pin, value) Set the specified pin to the specified value. :param pin: arduino pin number :param value: pin value (1 or 0) Example: digital_output.py","title":"digital_write"},{"location":"device_writes/#pwm_write","text":"def pwm_write(self, pin, value) Set the selected pwm pin to the specified value. :param pin: PWM pin number :param value: Pin value (0 - 0x4000) Example: fade.py Notes: The value parameter is typically set between 0 and 255.","title":"pwm_write"},{"location":"device_writes/#servo_write","text":"def servo_write(self, pin, position) This is an alias for analog_write to set the position of a servo that has been previously configured using set_pin_mode_servo. :param pin: arduino pin number :param position: servo position Example: servo.py Notes: For an angular servo, the position parameter is set between 0 and 180 (degrees). For a continuous servo, 0 is full-speed in one direction, 180 is full speed in the other, and a value near 90 is no movement. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"servo_write"},{"location":"enable_disable/","text":"Analog and Digital Input Pin Reporting Callback reporting begins immediately upon setting a pin as either a digital or analog input pin. If your application should unexpectedly exit without an orderly shutdown, the Robo HAT MM1 may continue to stream data, even though your application has exited. In this scenario, if you do not re-power the Robo HAT MM1 before restarting your application, the continuing data stream may cause pymata_rh to fail because the data stream is out of sync with pymata_rh's state. One way of making sure that you do not encounter this scenario is to turn off reporting before exiting your application. disable_analog_reporting def disable_analog_reporting(self, pin) Disables analog reporting for a single analog pin. :param pin: Analog pin number. For example for A0, the number is 0. Example: disable_enable_analog_reporting.py Notes: This method resets the pin mode for the specified pin to a digital input mode. enable_analog_reporting def enable_analog_reporting(self, pin, callback=None, differential=1) Enables analog reporting. This is an alias for set_pin_mode_analog_input. Disabling analog reporting sets the pin to a digital input pin, so we need to provide the callback and differential if we wish to specify it. :param pin: Analog pin number. For example for A0, the number is 0. :param callback: callback function :param differential: This value needs to be met for a callback to be invoked. Example: disable_enable_analog_reporting.py disable_digital_reporting def disable_digital_reporting(self, pin) Disables digital reporting. By turning reporting off for this pin, reporting is disabled for all 8 bits in the \"port\" :param pin: Pin and all pins for this port Example: disable_enable_digital_reporting.py enable_digital_reporting def enable_digital_reporting(self, pin) Enables digital reporting. By turning reporting on for all 8 bits in the \"port\" - this is part of Firmata's protocol specification. :param pin: Pin and all pins for this port :returns: No return value Example: disable_enable_digital_reporting.py MPU9250 9DOF Sensor Reporting To understand how to enable and disable reporting for this device, please go to this page. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Enabling/Disabling Analog And Digital Reporting"},{"location":"enable_disable/#analog-and-digital-input-pin-reporting","text":"Callback reporting begins immediately upon setting a pin as either a digital or analog input pin. If your application should unexpectedly exit without an orderly shutdown, the Robo HAT MM1 may continue to stream data, even though your application has exited. In this scenario, if you do not re-power the Robo HAT MM1 before restarting your application, the continuing data stream may cause pymata_rh to fail because the data stream is out of sync with pymata_rh's state. One way of making sure that you do not encounter this scenario is to turn off reporting before exiting your application.","title":"Analog and Digital Input Pin  Reporting"},{"location":"enable_disable/#disable_analog_reporting","text":"def disable_analog_reporting(self, pin) Disables analog reporting for a single analog pin. :param pin: Analog pin number. For example for A0, the number is 0. Example: disable_enable_analog_reporting.py Notes: This method resets the pin mode for the specified pin to a digital input mode.","title":"disable_analog_reporting"},{"location":"enable_disable/#enable_analog_reporting","text":"def enable_analog_reporting(self, pin, callback=None, differential=1) Enables analog reporting. This is an alias for set_pin_mode_analog_input. Disabling analog reporting sets the pin to a digital input pin, so we need to provide the callback and differential if we wish to specify it. :param pin: Analog pin number. For example for A0, the number is 0. :param callback: callback function :param differential: This value needs to be met for a callback to be invoked. Example: disable_enable_analog_reporting.py","title":"enable_analog_reporting"},{"location":"enable_disable/#disable_digital_reporting","text":"def disable_digital_reporting(self, pin) Disables digital reporting. By turning reporting off for this pin, reporting is disabled for all 8 bits in the \"port\" :param pin: Pin and all pins for this port Example: disable_enable_digital_reporting.py","title":"disable_digital_reporting"},{"location":"enable_disable/#enable_digital_reporting","text":"def enable_digital_reporting(self, pin) Enables digital reporting. By turning reporting on for all 8 bits in the \"port\" - this is part of Firmata's protocol specification. :param pin: Pin and all pins for this port :returns: No return value Example: disable_enable_digital_reporting.py","title":"enable_digital_reporting"},{"location":"enable_disable/#mpu9250-9dof-sensor-reporting","text":"To understand how to enable and disable reporting for this device, please go to this page. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"MPU9250 9DOF Sensor  Reporting"},{"location":"exceptions/","text":"Exceptions When pymata_rh detects an error, it raises a RuntimeError exception. The table below shows the exception report string displayed on the console when an exception is raised. A probable cause and troubleshooting tip is also provided. Exception Report Probable Cause Troubleshooting ERROR: Python 3.7 or greater is required for use of this program. Unsupported version of python detected Make sure that you are using Python 3.7 or greater. No Arduino Found or User Aborted Program. Com Port not found. Make sure that you have the Arduino plugged in. Firmata Sketch Firmware Version Not Found. Valid firmware version not returned. Make sure that you have a Firmata sketch installed on the Arduino. Analog map retrieval timed out. Do you have Arduino connectivity, and do you have the correct Firmata sketch uploaded to the board? Analog report request timed out Self-explanatory. User Hit Control-C. User aborted the application. Not Applicable. Retrieving ID From Arduino Failed. FirmataExpress handshake not returned. Make sure that FirmataExpress was uploaded to the Arduino Invalid Arduino identifier retrieved FirmataExpress and pymata_rh Arduino IDs do not match. Verify the Arduino IDs write fail in _send_command Serial write failed. Check the serial cable. Invalid mode requested for pin The mode is not supported for the pin Modify code to use valid pin number and mode. Pin not supported Pin number is not supported Modify the code for a valid pin number. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Exceptions"},{"location":"exceptions/#exceptions","text":"When pymata_rh detects an error, it raises a RuntimeError exception. The table below shows the exception report string displayed on the console when an exception is raised. A probable cause and troubleshooting tip is also provided. Exception Report Probable Cause Troubleshooting ERROR: Python 3.7 or greater is required for use of this program. Unsupported version of python detected Make sure that you are using Python 3.7 or greater. No Arduino Found or User Aborted Program. Com Port not found. Make sure that you have the Arduino plugged in. Firmata Sketch Firmware Version Not Found. Valid firmware version not returned. Make sure that you have a Firmata sketch installed on the Arduino. Analog map retrieval timed out. Do you have Arduino connectivity, and do you have the correct Firmata sketch uploaded to the board? Analog report request timed out Self-explanatory. User Hit Control-C. User aborted the application. Not Applicable. Retrieving ID From Arduino Failed. FirmataExpress handshake not returned. Make sure that FirmataExpress was uploaded to the Arduino Invalid Arduino identifier retrieved FirmataExpress and pymata_rh Arduino IDs do not match. Verify the Arduino IDs write fail in _send_command Serial write failed. Check the serial cable. Invalid mode requested for pin The mode is not supported for the pin Modify code to use valid pin number and mode. Pin not supported Pin number is not supported Modify the code for a valid pin number. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Exceptions"},{"location":"firmata_express/","text":"FirmataExpress Installation Instructions 1. Open the Arduino IDE and select Tools/Manage Libraries. 2. Enter \"FirmataExpress in the search box. 3. Click on the Install button. 4. FirmataExpress also requires that the Ultrasonic library by Erick Sim\u00f5es be installed. Using the Arduino IDE, install the ultrasonic library . Click on Tools/Manage Libraries and select Ultrasonic and then click Install. When pymata_rh is instantiated, the version of FirmataExpress is checked for compatibility. If an incompatible version is found, a RuntimeError exception will be raised. The correct version to be used is identified and printed on the console. Setting The FirmataExpress Instance ID FirmataExpress, in conjunction with pymata_rh, can automatically associate a Pymata Express application with a specific Arduino board plugged into your computer. If you only have a single Arduino connected at a time, you do not need to do anything. However, if you wish to run multiple Arduinos, you will need to assign a unique ID number to each Arduino. The ID number is then supplied as an input parameter when your application is instantiated. The Pymata Express instance parameter is discussed here . To set the ID number in FirmataExpress, load the FirmataExpress sketch into the Arduino IDE. Look for the following line: #define ARDUINO_INSTANCE_ID 1 Modify the value of 1 to the matching number you will use with Pymata Express. You may then compile and upload FirmataExpress to your Arduino. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Installing FirmataExpress"},{"location":"firmata_express/#firmataexpress","text":"","title":"FirmataExpress"},{"location":"firmata_express/#installation-instructions","text":"1. Open the Arduino IDE and select Tools/Manage Libraries. 2. Enter \"FirmataExpress in the search box. 3. Click on the Install button. 4. FirmataExpress also requires that the Ultrasonic library by Erick Sim\u00f5es be installed. Using the Arduino IDE, install the ultrasonic library . Click on Tools/Manage Libraries and select Ultrasonic and then click Install. When pymata_rh is instantiated, the version of FirmataExpress is checked for compatibility. If an incompatible version is found, a RuntimeError exception will be raised. The correct version to be used is identified and printed on the console.","title":"Installation Instructions"},{"location":"firmata_express/#setting-the-firmataexpress-instance-id","text":"FirmataExpress, in conjunction with pymata_rh, can automatically associate a Pymata Express application with a specific Arduino board plugged into your computer. If you only have a single Arduino connected at a time, you do not need to do anything. However, if you wish to run multiple Arduinos, you will need to assign a unique ID number to each Arduino. The ID number is then supplied as an input parameter when your application is instantiated. The Pymata Express instance parameter is discussed here . To set the ID number in FirmataExpress, load the FirmataExpress sketch into the Arduino IDE. Look for the following line: #define ARDUINO_INSTANCE_ID 1 Modify the value of 1 to the matching number you will use with Pymata Express. You may then compile and upload FirmataExpress to your Arduino. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Setting The FirmataExpress Instance ID"},{"location":"graph_demo/","text":"The Tkinter Graphical User Interface Demo Starting The Demo When you install pymata-rh, a graphical demo is automatically installed for you. To start the demo, open a terminal and type: rhdemo The rhdemo program is a python-banyan application. When you invoke rhdemo, a Banyan backplane, the GUI, and a Banyan Gateway for pymata_rh is automatically started for you. This demo allows you to interact with the RoboHAT MM1 without having to do any programming. All features are supported for all pins that support the feature. Ending The Demo Press Control-C in the terminal window where you started rhdemo. Servo Pin Digital Out You can set a Servo pin for digital output on this first screen and set the output value to a zero or a one by using the associated slider on the right side. Except for Servo pins 3 and 4, you can set the PWM output value between 0 and 255 for each pin. Lastly, you can attach a servo to any of the pins and adjust the servo angle to between 0 and 180 degrees. RCC/NeoPixel/LED Out This screen is very similar to the first screen but allows you to control digital output for the RCC pins, the NeoPixel pin, and the Board LED. The RCC pins do not support PWM, the NeoPixel pin supports all modes, and the LED can only be turned on or off. NOTE: Pytmata-rh does not support direct control of NeoPixel devices, it just uses that pin as a standard digital pin. Digital/Analog Input This screen allows you to view the current digital or analog input values for each supported pin. The values displayed are continually being updated in real-time. DHT This screen allows you to monitor both the humidity and temperature reported by a DHT 11 or DHT 22 device. Before pressing the button to monitor the DHT, select its connected pin and device type using the provided GUI widgets. Shortly after pressing the button to start DHT monitoring, continuously updated and displayed on the right. Sonar This screen allows you to connect an HC-SR04 SONAR distance sensor to the selected trigger and echo pins. After pressing the button to start monitoring, the measured distance is continuously updated and displayed on the right. MPU9250 The RoboHAT MM1 includes an integrated MPU9250 that consists of an accelerometer, gyroscope, magnetometer, and temperature sensor. After pressing the button to start monitoring, this screen continuously displays the various axes and the temperature. INA219 The RoboHAT MM1 includes an INA219 voltage/current/power monitoring device. Shortly after pressing the button to start monitoring, this display will provide an updated view of the various parameters the INA219 provides. For updates, you must press the button. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Running The Demo"},{"location":"graph_demo/#the-tkinter-graphical-user-interface-demo","text":"","title":"The Tkinter Graphical User Interface Demo"},{"location":"graph_demo/#starting-the-demo","text":"When you install pymata-rh, a graphical demo is automatically installed for you. To start the demo, open a terminal and type: rhdemo The rhdemo program is a python-banyan application. When you invoke rhdemo, a Banyan backplane, the GUI, and a Banyan Gateway for pymata_rh is automatically started for you. This demo allows you to interact with the RoboHAT MM1 without having to do any programming. All features are supported for all pins that support the feature.","title":"Starting The Demo"},{"location":"graph_demo/#ending-the-demo","text":"Press Control-C in the terminal window where you started rhdemo.","title":"Ending The Demo"},{"location":"graph_demo/#servo-pin-digital-out","text":"You can set a Servo pin for digital output on this first screen and set the output value to a zero or a one by using the associated slider on the right side. Except for Servo pins 3 and 4, you can set the PWM output value between 0 and 255 for each pin. Lastly, you can attach a servo to any of the pins and adjust the servo angle to between 0 and 180 degrees.","title":"Servo Pin Digital Out"},{"location":"graph_demo/#rccneopixelled-out","text":"This screen is very similar to the first screen but allows you to control digital output for the RCC pins, the NeoPixel pin, and the Board LED. The RCC pins do not support PWM, the NeoPixel pin supports all modes, and the LED can only be turned on or off. NOTE: Pytmata-rh does not support direct control of NeoPixel devices, it just uses that pin as a standard digital pin.","title":"RCC/NeoPixel/LED Out"},{"location":"graph_demo/#digitalanalog-input","text":"This screen allows you to view the current digital or analog input values for each supported pin. The values displayed are continually being updated in real-time.","title":"Digital/Analog Input"},{"location":"graph_demo/#dht","text":"This screen allows you to monitor both the humidity and temperature reported by a DHT 11 or DHT 22 device. Before pressing the button to monitor the DHT, select its connected pin and device type using the provided GUI widgets. Shortly after pressing the button to start DHT monitoring, continuously updated and displayed on the right.","title":"DHT"},{"location":"graph_demo/#sonar","text":"This screen allows you to connect an HC-SR04 SONAR distance sensor to the selected trigger and echo pins. After pressing the button to start monitoring, the measured distance is continuously updated and displayed on the right.","title":"Sonar"},{"location":"graph_demo/#mpu9250","text":"The RoboHAT MM1 includes an integrated MPU9250 that consists of an accelerometer, gyroscope, magnetometer, and temperature sensor. After pressing the button to start monitoring, this screen continuously displays the various axes and the temperature.","title":"MPU9250"},{"location":"graph_demo/#ina219","text":"The RoboHAT MM1 includes an INA219 voltage/current/power monitoring device. Shortly after pressing the button to start monitoring, this display will provide an updated view of the various parameters the INA219 provides. For updates, you must press the button. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"INA219"},{"location":"gui_screens/","text":"The Tkinter Graphical Interface Demo Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Gui screens"},{"location":"i2c/","text":"Communicating With I2C Devices Pymata_rh has the capability to support one or more i2c devices connected to the i2c bus. The API supports several i2c read methods, and a single i2c write method, described below. NOTE 1: If you do not specify a callback for any given read method, to retrieve the latest values, you will need to use the i2c_read_saved_data method. The amount of time it takes an i2c device to reply to an i2c read varies from device to device. Therefore it is simpler to use callbacks. NOTE 2: Refer to this example for the i2c read and write methods. Read Commands i2c_read def i2c_read(self, address, register, number_of_bytes, callback=None) Read the specified number of bytes from the specified register for the i2c device. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Optional callback function to report i2c data as a result of read command callback returns a data list: [pin_type, i2c_device_address, i2c_read_register, data_bytes returned, time_stamp] The pin_type for i2c = 6 Example: See NOTE 2 above. i2c_read_continuous def i2c_read_continuous(self, address, register, number_of_bytes, callback=None) Some i2c devices support a continuous streaming data output. This command enables that mode for the device that supports continuous reads. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Optional callback function to report i2c data as a result of read command callback returns a data list: [pin_type, i2c_device_address, i2c_read_register, data_bytes returned, time_stamp] The pin_type for i2c = 6 Example: See NOTE 2 above. i2c_read_restart_transmission def i2c_read_restart_transmission(self, address, register, number_of_bytes, callback=None) Read the specified number of bytes from the specified register for the i2c device. This restarts the transmission after the read. It is required for some i2c devices such as the MMA8452Q accelerometer. :param address: i2c device address :param register: i2c register :param number_of_bytes: number of bytes to be read :param callback: Optional callback function to report i2c data as a result of read command callback returns a data list: [pin_type, i2c_device_address, i2c_read_regsiter, data_bytes returned, time_stamp] The pin_type for i2c pins = 6 Example: See NOTE 2 above. i2c_read_saved_data def i2c_read_saved_data(self, address) This method retrieves cached i2c data to support a polling mode. :param address: I2C device address :returns: Last cached value reported This contains the number of bytes requested followed by the time_stamp. Example: See NOTE 2 above. Write Command i2c_write def i2c_write(self, address, args) Write data to an i2c device. :param address: i2c device address :param args: A variable number of bytes to be sent to the device passed in as a list Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"I2C Reads And Writes"},{"location":"i2c/#communicating-with-i2c-devices","text":"Pymata_rh has the capability to support one or more i2c devices connected to the i2c bus. The API supports several i2c read methods, and a single i2c write method, described below. NOTE 1: If you do not specify a callback for any given read method, to retrieve the latest values, you will need to use the i2c_read_saved_data method. The amount of time it takes an i2c device to reply to an i2c read varies from device to device. Therefore it is simpler to use callbacks. NOTE 2: Refer to this example for the i2c read and write methods.","title":"Communicating With I2C Devices"},{"location":"i2c/#read-commands","text":"","title":"Read Commands"},{"location":"i2c/#i2c_read","text":"def i2c_read(self, address, register, number_of_bytes, callback=None) Read the specified number of bytes from the specified register for the i2c device. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Optional callback function to report i2c data as a result of read command callback returns a data list: [pin_type, i2c_device_address, i2c_read_register, data_bytes returned, time_stamp] The pin_type for i2c = 6 Example: See NOTE 2 above.","title":"i2c_read"},{"location":"i2c/#i2c_read_continuous","text":"def i2c_read_continuous(self, address, register, number_of_bytes, callback=None) Some i2c devices support a continuous streaming data output. This command enables that mode for the device that supports continuous reads. :param address: i2c device address :param register: i2c register (or None if no register selection is needed) :param number_of_bytes: number of bytes to be read :param callback: Optional callback function to report i2c data as a result of read command callback returns a data list: [pin_type, i2c_device_address, i2c_read_register, data_bytes returned, time_stamp] The pin_type for i2c = 6 Example: See NOTE 2 above.","title":"i2c_read_continuous"},{"location":"i2c/#i2c_read_restart_transmission","text":"def i2c_read_restart_transmission(self, address, register, number_of_bytes, callback=None) Read the specified number of bytes from the specified register for the i2c device. This restarts the transmission after the read. It is required for some i2c devices such as the MMA8452Q accelerometer. :param address: i2c device address :param register: i2c register :param number_of_bytes: number of bytes to be read :param callback: Optional callback function to report i2c data as a result of read command callback returns a data list: [pin_type, i2c_device_address, i2c_read_regsiter, data_bytes returned, time_stamp] The pin_type for i2c pins = 6 Example: See NOTE 2 above.","title":"i2c_read_restart_transmission"},{"location":"i2c/#i2c_read_saved_data","text":"def i2c_read_saved_data(self, address) This method retrieves cached i2c data to support a polling mode. :param address: I2C device address :returns: Last cached value reported This contains the number of bytes requested followed by the time_stamp. Example: See NOTE 2 above.","title":"i2c_read_saved_data"},{"location":"i2c/#write-command","text":"","title":"Write Command"},{"location":"i2c/#i2c_write","text":"def i2c_write(self, address, args) Write data to an i2c device. :param address: i2c device address :param args: A variable number of bytes to be sent to the device passed in as a list Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"i2c_write"},{"location":"ina219/","text":"Interacting With The INA219 Pymata_rh provides a separate API method call to retrieve each of the measurements that an INA219 can perform. The following API methods to allow you to control and monitor the INA219: ina_initialize ina_read_bus_voltage ina_read_bus_voltage_last ina_read_bus_current ina_read_bus_current_last ina_read_power ina_read_power_last ina_read_shunt_voltage ina_read_shunt_voltage_last ina_read_supply_voltage ina_read_supply_voltage_last Each of the methods that end in _last retrieves the last data values read from the device. These methods do not do a physical read of the INA219. All the other methods that do not end with _last perform a physical read of the device. ina_initialize def ina_initialize(self, address=64, shunt_ohms=0.2, max_expected_amps=0.2, callback=None) This method instantiates an INA219 object. :param address: The i2c address of the device :param shunt_ohms: The shunt resistance in ohms :param max_expected_amps: The maximum expected current in amps :param callback: Callback method that will INA219 callbacks Note: There is a single callback shared by all INA methods. This method must be called before calling any of the other INA219 methods. Typically, you can accept all of the default values. If you wish to have your application automatically notified of any INA219 reads, you must specify a callback function. Using a callback is optional but highly recommended. A callback function ensures that your application receives the latest INA219 data automatically without any polling interaction. If you do not specify a callback method, you may still poll for the latest reported values using the INA219 methods that end in _last The data frame returned as a result of any of the reads is described in the specific read methods. For a discussion on callbacks and polling, please refer to this section of the document. Example: ina_test.py ina_read_bus_voltage def ina_read_bus_voltage(self): \"\"\" This method well execute a read of the bus voltage. If a callback was specified in ina_initialize, then a callback frame is specified as follows: [pin_type=0x11, device_i2c_address, read_type=0 (bus voltage), voltage, units='V', timestamp] The data is also saved to be retrieved by ina_read_supply_voltage_last() :return: callback is called and storage updated with latest value \"\"\" Example: ina_test.py ina_read_bus_voltage_last def ina_read_bus_voltage_last(self): \"\"\" Retrieve last bus voltage value read from the ina_219. :return: list: [pin_type=0x11, device_i2c_address, read_type=0 (bus voltage), units='V', timestamp] \"\"\" return self.ina_last_value_bus_voltage Example: ina_test.py ina_read_bus_current def ina_read_bus_current(self): \"\"\" This method well execute a read of the bus current. If a callback was specified in ina_initialize, then a callback frame is specified as follows: [pin_type=0x11, device_i2c_address, read_type=1 (bus current), current, units='mA', timestamp] The data is also saved to be retrieved by ina_read_bus_current_last() :return: callback is called and storage updated with latest value \"\"\" Example: ina_test.py ina_read_bus_current_last def ina_read_bus_current_last(self): \"\"\" Retrieve last supply voltage value read from the ina_219. :return: list: [pin_type=0x11, device_i2c_address, read_type=1 (bus voltage), voltage, units='mA', timestamp] \"\"\" Example: ina_test.py def ina_read_supply_voltage(self): \"\"\" This method well execute a read of the supply voltage. If a callback was specified in ina_initialize, then a callback frame is specified as follows: [pin_type=0x11, device_i2c_address, read_type=2 (supply voltage), supply voltage, unit='V',timestamp] The data is also saved to be retrieved by ina_read_supply_voltage_last() :return: callback is called and storage updated with latest value \"\"\" Example: ina_test.py ina_read_supply_voltage_last def ina_read_supply_voltage_last(self): \"\"\" This method retrieves the last supply voltage read. :return: list: [pin_type=0x11, device_i2c_address, read_type=2 (supply voltage), voltage, units='V', timestamp] \"\"\" Example: ina_test.py ina_read_shunt_voltage def ina_read_shunt_voltage(self): \"\"\" This method well execute a read of the shunt voltage. If a callback was specified in ina_initialize, then a callback frame is specified as follows: [pin_type=0x11, device_i2c_address, read_type=3 (supply voltage), shunt voltage, units='mV', timestamp] The data is also saved to be retrieved by ina_read_shunt_voltage_last() :return: callback is called and storage updated with latest value \"\"\" Example: ina_test.py ina_read_shunt_voltage_last def ina_read_shunt_voltage_last(self): \"\"\" This method well execute a read of the shunt voltage. If a callback was specified in ina_initialize, then a callback frame is specified as follows: :return: list: [pin_type=0x11, device_i2c_address, read_type=3 (shunt voltage), shunt voltage, units='mV', timestamp] \"\"\" Example: ina_test.py ina_read_power def ina_read_power(self): \"\"\" This method well execute a read of the power. If a callback was specified in ina_initialize, then a callback frame is specified as follows: [pin_type=0x11, device_i2c_address, read_type=4 (power), power, units='mW', timestamp] The data is also saved to be retrieved by ina_read_power_last() :return: callback is called and storage updated with latest value \"\"\" Example: ina_test.py ## ina_read_power_last def ina_read_power_last(self): \"\"\" This method retrieves the last read power value. :return: list: [pin_type=0x11, device_i2c_address, read_type=4 (power), power, units='mW', timestamp] \"\"\" Example: ina_test.py ina_sleep def ina_sleep(self): \"\"\" Place the ina219 into sleep mode. \"\"\" Example: ina_test.py ina_wake def ina_wake(self): \"\"\" Wake the ina219 from sleep model \"\"\" Example: ina_test.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Configruing And Reading The INA219 Current, Shunt, And Power Monitor"},{"location":"ina219/#interacting-with-the-ina219","text":"Pymata_rh provides a separate API method call to retrieve each of the measurements that an INA219 can perform. The following API methods to allow you to control and monitor the INA219: ina_initialize ina_read_bus_voltage ina_read_bus_voltage_last ina_read_bus_current ina_read_bus_current_last ina_read_power ina_read_power_last ina_read_shunt_voltage ina_read_shunt_voltage_last ina_read_supply_voltage ina_read_supply_voltage_last Each of the methods that end in _last retrieves the last data values read from the device. These methods do not do a physical read of the INA219. All the other methods that do not end with _last perform a physical read of the device.","title":"Interacting With The INA219"},{"location":"ina219/#ina_initialize","text":"def ina_initialize(self, address=64, shunt_ohms=0.2, max_expected_amps=0.2, callback=None) This method instantiates an INA219 object. :param address: The i2c address of the device :param shunt_ohms: The shunt resistance in ohms :param max_expected_amps: The maximum expected current in amps :param callback: Callback method that will INA219 callbacks Note: There is a single callback shared by all INA methods. This method must be called before calling any of the other INA219 methods. Typically, you can accept all of the default values. If you wish to have your application automatically notified of any INA219 reads, you must specify a callback function. Using a callback is optional but highly recommended. A callback function ensures that your application receives the latest INA219 data automatically without any polling interaction. If you do not specify a callback method, you may still poll for the latest reported values using the INA219 methods that end in _last The data frame returned as a result of any of the reads is described in the specific read methods. For a discussion on callbacks and polling, please refer to this section of the document. Example: ina_test.py","title":"ina_initialize"},{"location":"ina219/#ina_read_bus_voltage","text":"def ina_read_bus_voltage(self): \"\"\" This method well execute a read of the bus voltage. If a callback was specified in ina_initialize, then a callback frame is specified as follows: [pin_type=0x11, device_i2c_address, read_type=0 (bus voltage), voltage, units='V', timestamp] The data is also saved to be retrieved by ina_read_supply_voltage_last() :return: callback is called and storage updated with latest value \"\"\" Example: ina_test.py","title":"ina_read_bus_voltage"},{"location":"ina219/#ina_read_bus_voltage_last","text":"def ina_read_bus_voltage_last(self): \"\"\" Retrieve last bus voltage value read from the ina_219. :return: list: [pin_type=0x11, device_i2c_address, read_type=0 (bus voltage), units='V', timestamp] \"\"\" return self.ina_last_value_bus_voltage Example: ina_test.py","title":"ina_read_bus_voltage_last"},{"location":"ina219/#ina_read_bus_current","text":"def ina_read_bus_current(self): \"\"\" This method well execute a read of the bus current. If a callback was specified in ina_initialize, then a callback frame is specified as follows: [pin_type=0x11, device_i2c_address, read_type=1 (bus current), current, units='mA', timestamp] The data is also saved to be retrieved by ina_read_bus_current_last() :return: callback is called and storage updated with latest value \"\"\" Example: ina_test.py","title":"ina_read_bus_current"},{"location":"ina219/#ina_read_bus_current_last","text":"def ina_read_bus_current_last(self): \"\"\" Retrieve last supply voltage value read from the ina_219. :return: list: [pin_type=0x11, device_i2c_address, read_type=1 (bus voltage), voltage, units='mA', timestamp] \"\"\" Example: ina_test.py def ina_read_supply_voltage(self): \"\"\" This method well execute a read of the supply voltage. If a callback was specified in ina_initialize, then a callback frame is specified as follows: [pin_type=0x11, device_i2c_address, read_type=2 (supply voltage), supply voltage, unit='V',timestamp] The data is also saved to be retrieved by ina_read_supply_voltage_last() :return: callback is called and storage updated with latest value \"\"\" Example: ina_test.py","title":"ina_read_bus_current_last"},{"location":"ina219/#ina_read_supply_voltage_last","text":"def ina_read_supply_voltage_last(self): \"\"\" This method retrieves the last supply voltage read. :return: list: [pin_type=0x11, device_i2c_address, read_type=2 (supply voltage), voltage, units='V', timestamp] \"\"\" Example: ina_test.py","title":"ina_read_supply_voltage_last"},{"location":"ina219/#ina_read_shunt_voltage","text":"def ina_read_shunt_voltage(self): \"\"\" This method well execute a read of the shunt voltage. If a callback was specified in ina_initialize, then a callback frame is specified as follows: [pin_type=0x11, device_i2c_address, read_type=3 (supply voltage), shunt voltage, units='mV', timestamp] The data is also saved to be retrieved by ina_read_shunt_voltage_last() :return: callback is called and storage updated with latest value \"\"\" Example: ina_test.py","title":"ina_read_shunt_voltage"},{"location":"ina219/#ina_read_shunt_voltage_last","text":"def ina_read_shunt_voltage_last(self): \"\"\" This method well execute a read of the shunt voltage. If a callback was specified in ina_initialize, then a callback frame is specified as follows: :return: list: [pin_type=0x11, device_i2c_address, read_type=3 (shunt voltage), shunt voltage, units='mV', timestamp] \"\"\" Example: ina_test.py","title":"ina_read_shunt_voltage_last"},{"location":"ina219/#ina_read_power","text":"def ina_read_power(self): \"\"\" This method well execute a read of the power. If a callback was specified in ina_initialize, then a callback frame is specified as follows: [pin_type=0x11, device_i2c_address, read_type=4 (power), power, units='mW', timestamp] The data is also saved to be retrieved by ina_read_power_last() :return: callback is called and storage updated with latest value \"\"\" Example: ina_test.py ## ina_read_power_last def ina_read_power_last(self): \"\"\" This method retrieves the last read power value. :return: list: [pin_type=0x11, device_i2c_address, read_type=4 (power), power, units='mW', timestamp] \"\"\" Example: ina_test.py","title":"ina_read_power"},{"location":"ina219/#ina_sleep","text":"def ina_sleep(self): \"\"\" Place the ina219 into sleep mode. \"\"\" Example: ina_test.py","title":"ina_sleep"},{"location":"ina219/#ina_wake","text":"def ina_wake(self): \"\"\" Wake the ina219 from sleep model \"\"\" Example: ina_test.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"ina_wake"},{"location":"init/","text":"The PymataRh Class To use the PymataRh class, you must first import it: from pymata_rh import pymata_rh and then instantiate it: board = pymata_rh.PymataRh() The board variable contains a reference to the PymataRh instance. You use this reference to access the PymataRh methods of the instance. For example, to cleanly shutdown your PymataRh application, you might call the shutdown method: board.shutdown() Of course, you can name the instance variable, anything that is meaningful to you. There is nothing magic about the name board . NOTE: pymata_rh considers the Robo HAT MM1 as an Arduino device. The term Arduino anywhere in the discussion is referring to the Robo HAT MM1. Understanding The PymataRh __init__ Parameters def __init__(self, com_port=None, baud_rate=115200, arduino_instance_id=1, arduino_wait=4, sleep_tune=0.000001, shutdown_on_exception=True): In most cases, you can accept all of the default parameters provided in the __init__ method. But there are times when you may wish to take advantage of the flexibility provided by the __init__ method parameters, so let's explore the definition and purpose of each parameter: The Auto-Discovery Parameters - com_port, baud_rate, and arduino_instance By accepting the default values for these parameters, pymata_rh assumes you have flashed your Arduino with FirmataExpress. com_port The com_port parameter specifies a serial com_port, such as COM4 or '/dev/ttyACM0' used for PC to Arduino communication. If the default value of None is accepted, pymata_rh will attempt to find the connected Arduino automatically. baud_rate The default for this parameter is 115200, matching the speed set for the FirmataExpress sketch. arduino_instance_id This parameter allows pymata_rh to connect to an Arduino with a matching ID. This is useful if you have multiple Arduino's plugged into your computer, and you wish to have a specific Arduino selected for connection. The default value for the arduino_instance_id for both pymata_rh and FirmataExpress is 1. Instructions for changing the FirmataExpress value may be found in the Installing FirmataExpress section of this document. arduino_wait This parameter specifies the amount of time that pymata_rh assumes it takes for an Arduino to reboot the FirmataExpress (or StandardFirmata) sketch from a power-up or reset. The default is 4 seconds. If the Arduino is not fully booted when com_port auto-discovery begins, auto-discovery will fail. sleep_tune This is the sleep value expressed in seconds, that is used at several strategic points in pymata_rh. For example, the serial receiver continuously checks the serial port receive buffer for an available character to process. If there is no character in the buffer, pymata_rh sleeps for the sleep_tune period before checking again. The default value is 0.000001 seconds. shutdown_on_exception When this parameter is set to True, the shutdown method is automatically called when an exception is detected. This disables reporting for both digital and analog pins, in addition to closing the serial port. By setting this parameter to False, the Arduino may continue to send data to your application even after restarting it. The default is True and recommended to be used. Examples Each example on GitHub demonstrates instantiating the Pymata_rh class. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"The __init__ Method"},{"location":"init/#the-pymatarh-class","text":"To use the PymataRh class, you must first import it: from pymata_rh import pymata_rh and then instantiate it: board = pymata_rh.PymataRh() The board variable contains a reference to the PymataRh instance. You use this reference to access the PymataRh methods of the instance. For example, to cleanly shutdown your PymataRh application, you might call the shutdown method: board.shutdown() Of course, you can name the instance variable, anything that is meaningful to you. There is nothing magic about the name board . NOTE: pymata_rh considers the Robo HAT MM1 as an Arduino device. The term Arduino anywhere in the discussion is referring to the Robo HAT MM1.","title":"The PymataRh Class"},{"location":"init/#understanding-the-pymatarh-__init__-parameters","text":"def __init__(self, com_port=None, baud_rate=115200, arduino_instance_id=1, arduino_wait=4, sleep_tune=0.000001, shutdown_on_exception=True): In most cases, you can accept all of the default parameters provided in the __init__ method. But there are times when you may wish to take advantage of the flexibility provided by the __init__ method parameters, so let's explore the definition and purpose of each parameter:","title":"Understanding The PymataRh __init__ Parameters"},{"location":"init/#the-auto-discovery-parameters-com_port-baud_rate-and-arduino_instance","text":"By accepting the default values for these parameters, pymata_rh assumes you have flashed your Arduino with FirmataExpress.","title":"The Auto-Discovery Parameters - com_port, baud_rate, and arduino_instance"},{"location":"init/#com_port","text":"The com_port parameter specifies a serial com_port, such as COM4 or '/dev/ttyACM0' used for PC to Arduino communication. If the default value of None is accepted, pymata_rh will attempt to find the connected Arduino automatically.","title":"com_port"},{"location":"init/#baud_rate","text":"The default for this parameter is 115200, matching the speed set for the FirmataExpress sketch.","title":"baud_rate"},{"location":"init/#arduino_instance_id","text":"This parameter allows pymata_rh to connect to an Arduino with a matching ID. This is useful if you have multiple Arduino's plugged into your computer, and you wish to have a specific Arduino selected for connection. The default value for the arduino_instance_id for both pymata_rh and FirmataExpress is 1. Instructions for changing the FirmataExpress value may be found in the Installing FirmataExpress section of this document.","title":"arduino_instance_id"},{"location":"init/#arduino_wait","text":"This parameter specifies the amount of time that pymata_rh assumes it takes for an Arduino to reboot the FirmataExpress (or StandardFirmata) sketch from a power-up or reset. The default is 4 seconds. If the Arduino is not fully booted when com_port auto-discovery begins, auto-discovery will fail.","title":"arduino_wait"},{"location":"init/#sleep_tune","text":"This is the sleep value expressed in seconds, that is used at several strategic points in pymata_rh. For example, the serial receiver continuously checks the serial port receive buffer for an available character to process. If there is no character in the buffer, pymata_rh sleeps for the sleep_tune period before checking again. The default value is 0.000001 seconds.","title":"sleep_tune"},{"location":"init/#shutdown_on_exception","text":"When this parameter is set to True, the shutdown method is automatically called when an exception is detected. This disables reporting for both digital and analog pins, in addition to closing the serial port. By setting this parameter to False, the Arduino may continue to send data to your application even after restarting it. The default is True and recommended to be used.","title":"shutdown_on_exception"},{"location":"init/#examples","text":"Each example on GitHub demonstrates instantiating the Pymata_rh class. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Examples"},{"location":"install_pymata_rh/","text":"Before You Install Pymata_rh requires Python 3.7 or above. Please see the Verifying/Installing Python 3.7 section of this document to verify or install Python on your computer. Installing Pymata_rh To install pymata_rh on Linux (including Raspberry Pi) and macOS computers, open a terminal window and type: sudo pip3 install pymata_rh For Windows users type: pip install pymata_rh You can find the code for pymata_rh on GitHub . Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Installing Pymata_Rh"},{"location":"install_pymata_rh/#before-you-install","text":"Pymata_rh requires Python 3.7 or above. Please see the Verifying/Installing Python 3.7 section of this document to verify or install Python on your computer.","title":"Before You Install"},{"location":"install_pymata_rh/#installing-pymata_rh","text":"To install pymata_rh on Linux (including Raspberry Pi) and macOS computers, open a terminal window and type: sudo pip3 install pymata_rh For Windows users type: pip install pymata_rh You can find the code for pymata_rh on GitHub . Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Installing Pymata_rh"},{"location":"license/","text":"GNU AFFERO GENERAL PUBLIC LICENSE Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software. A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public. The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version. An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS Definitions. \"This License\" refers to version 3 of the GNU Affero General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Remote Network Interaction; Use with the GNU General Public License. Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements. You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see http://www.gnu.org/licenses/ .","title":"License"},{"location":"management/","text":"Remote Firmata Management The methods in this section allow your application to perform some Firmata management functions remotely. send_reset def send_reset(self) Send a Sysex reset command to the Robot HAT MM1 Examples: All examples call shutdown, which in turn calls send_reset. Notes: This command will reset several Firmata internal data structures. It resets its internal i2c flags to indicate there are no i2c devices present. Digital reporting is turned off. It resets any analog pin that was set to a digital mode back to analog mode. If a pin was configured for tone, the tone is turned off. It clears all servo entries from its servo map. It sets the number of active sonar devices to zero. The shutdown method calls send_reset . shutdown def shutdown(self) This method attempts an orderly shutdown. If any exceptions are thrown, they are ignored. Examples: All the examples call shutdown. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Management Requests"},{"location":"management/#remote-firmata-management","text":"The methods in this section allow your application to perform some Firmata management functions remotely.","title":"Remote Firmata Management"},{"location":"management/#send_reset","text":"def send_reset(self) Send a Sysex reset command to the Robot HAT MM1 Examples: All examples call shutdown, which in turn calls send_reset. Notes: This command will reset several Firmata internal data structures. It resets its internal i2c flags to indicate there are no i2c devices present. Digital reporting is turned off. It resets any analog pin that was set to a digital mode back to analog mode. If a pin was configured for tone, the tone is turned off. It clears all servo entries from its servo map. It sets the number of active sonar devices to zero. The shutdown method calls send_reset .","title":"send_reset"},{"location":"management/#shutdown","text":"def shutdown(self) This method attempts an orderly shutdown. If any exceptions are thrown, they are ignored. Examples: All the examples call shutdown. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"shutdown"},{"location":"mpu9250/","text":"Interacting With The MPU9250 Pymata_rh provides the following API methods to allow you to control and monitor the MPU9250: mpu_9250_initialize mpu_9250_read_data mpu_9250_read_saved_data mpu_9250_calibrate Let's look at each method in detail. mpu_9250_initialize def mpu_9250_initialize(self, address_ak=12, address_mpu=104, g_fs=1, a_fs=0, m_fs=1, mode=2, a_bias=(0, 0, 0), g_bias=(0, 0, 0), m_bias=(0, 0, 0), mag_scale=(1, 1, 1), callback=None) This method instantiates an mpu_9250 object. It also creates the thread to manage the mpu_9250 data retrieval. :param address_ak: AK8963 I2C address (default:AK8963_ADDRESS[0x0C]). :param address_mpu: MPU-9250 I2C address (default:MPU9050_ADDRESS_68[0x68]). :param g_fs: Gyroscope full scale select (default:GFS_2000[2000dps]). :param a_fs: Accelerometer full scale select (default:AFS_16G[16g]). :param m_fs: Magnetometer scale select (default:AK8963_BIT_16[16bit]) :param mode: Magnetometer mode select (default:AK8963_MODE_C8HZ) :param a_bias: Accelerometer Bias :param g_bias: Gyroscope Bias :param m_bias: Magnetometer Hard Iron Distortion :param mag_scale: Magnetometer Soft Iron Distortion :param callback: Callback method that will receive mpu data frames This method must be called before calling the mpu_9250_read_data method. Typically, you can accept all of the default values. If you wish to have your application notified of all MPU9250 reads, you must specify a callback function to handle the callback data. Using a callback is optional but highly recommended. A callback function ensures that your application receives the latest MPU9250 data automatically without any polling interaction. If you do not specify a callback method, you may still poll for the latest reported values using the mpu_9250_read_saved_data method. For a discussion on callbacks and polling, please refer to this section of the document. Example: read_mpu.py mpu_9250_read_data def mpu_9250_read_data(self, mode=self.mpu_constants.MPU9250_READ_CONTINUOUS_ON, continuous_delay=0.3) Read and report mpu_9250 data for accelerometer, gyroscope, magnetometer, and device temperature. :param mode: MPU9250_READ_CONTINUOUS_ON Data is read continuously. Or MPU9250_READ_CONTINUOUS_OFF Data read is halted. :param continuous_delay: Minimum delay between reads :return: For MPU9250_READ_CONTINUOUS_ON. If a callback was specified in mpu_9250_initialize(), then data returned is returned via callback. Callback data is a list with format: index[0] = pin type - for mpu9250 the value is 16 index[1] = mpu address index[2] = accelerometer x axis index[3] = accelerometer y axis index[4] = accelerometer z axis index[5] = gyroscope x axis index[6] = gyroscope y axis index[7] = gyroscope z axis index[8] = magnetometer x axis index[9] = magnetometer y axis index[10] = magnetometer z axis index[11] = temperature index[12] = timestamp If no callback was specified, then data is stored and can be retrieved using mpu_9250_read_saved_data(). This method either starts a continuous read of data from the MPU9250 device if the mode is specified self.mpu_constants.MPU9250_READ_CONTINUOUS_ON or halts a continuous read if the mode is specified as self.mpu_constants.MPU9250_READ_CONTINUOUS_OFF The units of data for each item returned is as follows: Sensor Unit of Measurement Axis Reported Accelerometer g (1g = 9.80665 m/s\u00b2) x, y and z axes Gyroscope degrees per second (\u00b0/s) x, y and z axes Magnetometer microtesla (\u03bcT) x, y and z axes Temperature celsius degrees (\u00b0C) Not Appplicaable The data for all of the sensors of the MPU9250 are queried at the same time so that you may track things as accurately as possible. Example: read_mpu.py mpu_9250_read_saved_data def mpu_9250_read_saved_data(self) Retrieve and return the last data set read from the mpu_9250 :return: The last read data frame in list form. An empty list, or a value of None may be returned as well. The format for the data is the same as that of the callback data. You may poll the MPU9250 for the latest data by calling this method. You may call mpu_9250_read_saved_data, whether you specified a callback or not. Example: read_mpu.py mpu_9250_calibrate def mpu_9250_calibrate(self, log=True) This method will calibrate the device. This is a lengthy process and may take about a minute to complete. This method will: 1. Test if the mpu_9250 was initialized and if not, it will initialize with the default values. 2. Print the current device settings. 3. Run the calibrations for both the calibrate_ak8963 and MPU6050. 4. Configure the device with the new settings. 5. Print the new device settings. 6. If the log parameter is True, the calibrations will be saved to a log file. :param: logging - If set to True calibration data is logged to a file named mpu_calibration.log :return: If an error is encountered a RunTimeError exception is raised. You need not initialize the MPU9250 after calling mpu_9250_calibrate. Here is a sample of console output after a calibration completes. If log is enabled, each run is appended to the file so that you may have a running history of calibrations. Configuration data being logged to mpu_calibration.log Initializing mpu9250 Settings Before Calibration: MPU Address: 0x68 AK Address: 0xc Accel Resolution: 6.103515625e-05 Gyro Resolution: 0.0152587890625 Mag Resolution: 0.14993894993894993 Accel Bias: (0, 0, 0) Gyro Bias: (0, 0, 0) Mag Bias: (0, 0, 0) Mag Calibration: (1.16796875, 1.171875, 1.125) Mag Scale: (1, 1, 1) Calibrating ... Calibrating 0x68 - AK8963 Iterations to go: 1 ak8963 complete. Calibrating 0x68 - MPU6500 Iterations to go: 1 mpu_6500 complete. Configuring with calibrated values... Settings After Calibration: MPU Address: 0x68 AK Address: 0xc Accel Resolution: 6.103515625e-05 Gyro Resolution: 0.0152587890625 Mag Resolution: 0.14993894993894993 Accel Bias: (-0.020819769965277776, 0.023098415798611112, 0.00850423177083326) Gyro Bias: (-2.617306179470486, 2.636379665798611, -0.698301527235243) Mag Bias: (45.00687003968254, 42.78531364468865, 27.326373626373623) Mag Calibration: (1.16796875, 1.171875, 1.125) Mag Scale: (0.9848484848484849, 1.0317460317460319, 0.9848484848484849) Example: calibrate_mpu9250.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Configuring And Reading The MPU9250 9DOF Device"},{"location":"mpu9250/#interacting-with-the-mpu9250","text":"Pymata_rh provides the following API methods to allow you to control and monitor the MPU9250: mpu_9250_initialize mpu_9250_read_data mpu_9250_read_saved_data mpu_9250_calibrate Let's look at each method in detail.","title":"Interacting With The MPU9250"},{"location":"mpu9250/#mpu_9250_initialize","text":"def mpu_9250_initialize(self, address_ak=12, address_mpu=104, g_fs=1, a_fs=0, m_fs=1, mode=2, a_bias=(0, 0, 0), g_bias=(0, 0, 0), m_bias=(0, 0, 0), mag_scale=(1, 1, 1), callback=None) This method instantiates an mpu_9250 object. It also creates the thread to manage the mpu_9250 data retrieval. :param address_ak: AK8963 I2C address (default:AK8963_ADDRESS[0x0C]). :param address_mpu: MPU-9250 I2C address (default:MPU9050_ADDRESS_68[0x68]). :param g_fs: Gyroscope full scale select (default:GFS_2000[2000dps]). :param a_fs: Accelerometer full scale select (default:AFS_16G[16g]). :param m_fs: Magnetometer scale select (default:AK8963_BIT_16[16bit]) :param mode: Magnetometer mode select (default:AK8963_MODE_C8HZ) :param a_bias: Accelerometer Bias :param g_bias: Gyroscope Bias :param m_bias: Magnetometer Hard Iron Distortion :param mag_scale: Magnetometer Soft Iron Distortion :param callback: Callback method that will receive mpu data frames This method must be called before calling the mpu_9250_read_data method. Typically, you can accept all of the default values. If you wish to have your application notified of all MPU9250 reads, you must specify a callback function to handle the callback data. Using a callback is optional but highly recommended. A callback function ensures that your application receives the latest MPU9250 data automatically without any polling interaction. If you do not specify a callback method, you may still poll for the latest reported values using the mpu_9250_read_saved_data method. For a discussion on callbacks and polling, please refer to this section of the document. Example: read_mpu.py","title":"mpu_9250_initialize"},{"location":"mpu9250/#mpu_9250_read_data","text":"def mpu_9250_read_data(self, mode=self.mpu_constants.MPU9250_READ_CONTINUOUS_ON, continuous_delay=0.3) Read and report mpu_9250 data for accelerometer, gyroscope, magnetometer, and device temperature. :param mode: MPU9250_READ_CONTINUOUS_ON Data is read continuously. Or MPU9250_READ_CONTINUOUS_OFF Data read is halted. :param continuous_delay: Minimum delay between reads :return: For MPU9250_READ_CONTINUOUS_ON. If a callback was specified in mpu_9250_initialize(), then data returned is returned via callback. Callback data is a list with format: index[0] = pin type - for mpu9250 the value is 16 index[1] = mpu address index[2] = accelerometer x axis index[3] = accelerometer y axis index[4] = accelerometer z axis index[5] = gyroscope x axis index[6] = gyroscope y axis index[7] = gyroscope z axis index[8] = magnetometer x axis index[9] = magnetometer y axis index[10] = magnetometer z axis index[11] = temperature index[12] = timestamp If no callback was specified, then data is stored and can be retrieved using mpu_9250_read_saved_data(). This method either starts a continuous read of data from the MPU9250 device if the mode is specified self.mpu_constants.MPU9250_READ_CONTINUOUS_ON or halts a continuous read if the mode is specified as self.mpu_constants.MPU9250_READ_CONTINUOUS_OFF The units of data for each item returned is as follows: Sensor Unit of Measurement Axis Reported Accelerometer g (1g = 9.80665 m/s\u00b2) x, y and z axes Gyroscope degrees per second (\u00b0/s) x, y and z axes Magnetometer microtesla (\u03bcT) x, y and z axes Temperature celsius degrees (\u00b0C) Not Appplicaable The data for all of the sensors of the MPU9250 are queried at the same time so that you may track things as accurately as possible. Example: read_mpu.py","title":"mpu_9250_read_data"},{"location":"mpu9250/#mpu_9250_read_saved_data","text":"def mpu_9250_read_saved_data(self) Retrieve and return the last data set read from the mpu_9250 :return: The last read data frame in list form. An empty list, or a value of None may be returned as well. The format for the data is the same as that of the callback data. You may poll the MPU9250 for the latest data by calling this method. You may call mpu_9250_read_saved_data, whether you specified a callback or not. Example: read_mpu.py","title":"mpu_9250_read_saved_data"},{"location":"mpu9250/#mpu_9250_calibrate","text":"def mpu_9250_calibrate(self, log=True) This method will calibrate the device. This is a lengthy process and may take about a minute to complete. This method will: 1. Test if the mpu_9250 was initialized and if not, it will initialize with the default values. 2. Print the current device settings. 3. Run the calibrations for both the calibrate_ak8963 and MPU6050. 4. Configure the device with the new settings. 5. Print the new device settings. 6. If the log parameter is True, the calibrations will be saved to a log file. :param: logging - If set to True calibration data is logged to a file named mpu_calibration.log :return: If an error is encountered a RunTimeError exception is raised. You need not initialize the MPU9250 after calling mpu_9250_calibrate. Here is a sample of console output after a calibration completes. If log is enabled, each run is appended to the file so that you may have a running history of calibrations. Configuration data being logged to mpu_calibration.log Initializing mpu9250 Settings Before Calibration: MPU Address: 0x68 AK Address: 0xc Accel Resolution: 6.103515625e-05 Gyro Resolution: 0.0152587890625 Mag Resolution: 0.14993894993894993 Accel Bias: (0, 0, 0) Gyro Bias: (0, 0, 0) Mag Bias: (0, 0, 0) Mag Calibration: (1.16796875, 1.171875, 1.125) Mag Scale: (1, 1, 1) Calibrating ... Calibrating 0x68 - AK8963 Iterations to go: 1 ak8963 complete. Calibrating 0x68 - MPU6500 Iterations to go: 1 mpu_6500 complete. Configuring with calibrated values... Settings After Calibration: MPU Address: 0x68 AK Address: 0xc Accel Resolution: 6.103515625e-05 Gyro Resolution: 0.0152587890625 Mag Resolution: 0.14993894993894993 Accel Bias: (-0.020819769965277776, 0.023098415798611112, 0.00850423177083326) Gyro Bias: (-2.617306179470486, 2.636379665798611, -0.698301527235243) Mag Bias: (45.00687003968254, 42.78531364468865, 27.326373626373623) Mag Calibration: (1.16796875, 1.171875, 1.125) Mag Scale: (0.9848484848484849, 1.0317460317460319, 0.9848484848484849) Example: calibrate_mpu9250.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"mpu_9250_calibrate"},{"location":"pin_changes/","text":"Retrieving The Latest Input Data Values As was mentioned earlier, callbacks are preferred over polling for input data change notifications. That being said, your application may dictate using polling over callbacks. This section describes the API methods to retrieve the latest cached input data values. analog_read def analog_read(self, pin) Retrieve the last data update for the specified analog pin. :param pin: Analog pin number (ex. A2 is specified as 2) :returns: A list = [last value change, time_stamp] Examples: analog_input_with_time_stamps.py dht_read def dht_read(self, pin): \"\"\" Retrieve the last data update for the specified dht pin. :param pin: digital pin number :return: A list = [humidity, temperature time_stamp] ERROR CODES: If either humidity or temperature value: == -1 Configuration Error == -2 Checksum Error == -3 Timeout Error \"\"\" Examples: dht.py digital_read def digital_read(self, pin) Retrieve the last data update for the specified digital pin. :param pin: Digital pin number :returns: A list = [last value change, time_stamp] Examples: digital_input.py digital_input_debounce.py digital_input_pullup.py i2c_read_saved_data def i2c_read_saved_data(self, address) This method retrieves cached i2c data to support a polling mode. :param address: I2C device address :returns: Last cached value reported This contains the number of bytes requested followed by the time_stamp. Example: i2c_adxl345_accelerometer.py sonar_read def sonar_read(self, trigger_pin) This is a FirmataExpress feature Retrieve Ping (HC-SR04 type) data. The data is presented as a dictionary. The 'key' is the trigger pin specified in sonar_config() and the 'data' is the current measured distance (in centimeters) for that pin. If there is no data, the value is set to None. :param trigger_pin: key into sonar data map :returns: A list = [last value, raw time_stamp] Example: 1. hc-sr04_distance_sensor.py Polling the MPU9250 and INA219 To poll the stored values for these devices, please see Configuring And Reading The MPU9250 9DOF Device and Configuring And Reading The INA219 Current, Shunt, And Power Monitor. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Reading Input Data Via Polling"},{"location":"pin_changes/#retrieving-the-latest-input-data-values","text":"As was mentioned earlier, callbacks are preferred over polling for input data change notifications. That being said, your application may dictate using polling over callbacks. This section describes the API methods to retrieve the latest cached input data values.","title":"Retrieving The Latest Input Data Values"},{"location":"pin_changes/#analog_read","text":"def analog_read(self, pin) Retrieve the last data update for the specified analog pin. :param pin: Analog pin number (ex. A2 is specified as 2) :returns: A list = [last value change, time_stamp] Examples: analog_input_with_time_stamps.py","title":"analog_read"},{"location":"pin_changes/#dht_read","text":"def dht_read(self, pin): \"\"\" Retrieve the last data update for the specified dht pin. :param pin: digital pin number :return: A list = [humidity, temperature time_stamp] ERROR CODES: If either humidity or temperature value: == -1 Configuration Error == -2 Checksum Error == -3 Timeout Error \"\"\" Examples: dht.py","title":"dht_read"},{"location":"pin_changes/#digital_read","text":"def digital_read(self, pin) Retrieve the last data update for the specified digital pin. :param pin: Digital pin number :returns: A list = [last value change, time_stamp] Examples: digital_input.py digital_input_debounce.py digital_input_pullup.py","title":"digital_read"},{"location":"pin_changes/#i2c_read_saved_data","text":"def i2c_read_saved_data(self, address) This method retrieves cached i2c data to support a polling mode. :param address: I2C device address :returns: Last cached value reported This contains the number of bytes requested followed by the time_stamp. Example: i2c_adxl345_accelerometer.py","title":"i2c_read_saved_data"},{"location":"pin_changes/#sonar_read","text":"def sonar_read(self, trigger_pin) This is a FirmataExpress feature Retrieve Ping (HC-SR04 type) data. The data is presented as a dictionary. The 'key' is the trigger pin specified in sonar_config() and the 'data' is the current measured distance (in centimeters) for that pin. If there is no data, the value is set to None. :param trigger_pin: key into sonar data map :returns: A list = [last value, raw time_stamp] Example: 1. hc-sr04_distance_sensor.py","title":"sonar_read"},{"location":"pin_changes/#polling-the-mpu9250-and-ina219","text":"To poll the stored values for these devices, please see Configuring And Reading The MPU9250 9DOF Device and Configuring And Reading The INA219 Current, Shunt, And Power Monitor. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Polling the MPU9250 and INA219"},{"location":"pin_modes/","text":"Introduction Independent of what the Robot HAT MM1 pin names suggest, pins may be able to be configured to operate in one of several modes. The modes available to any given pin is dependent upon pin type. For the pin modes available to a given pin, please refer to the pin table on the first page of this document. For example, a digital pin may be configured for input, output, and for some digital pins, PWM output operation. When setting a pin mode, a validity check is performed for the specified pin. If not, a RuntimeError exception is raised. Analog input pins are even more flexible. They may be configured for analog input, digital input, or digital output operation. PymataRh requires that before using a pin, its mode must be explicitly set. This is accomplished using one of the pymata_rh mode setting methods. In this section, the methods to set pin modes are presented. For each API method, a link to an example is provided. ANALOG PIN MODE set_pin_mode_analog_input def set_pin_mode_analog_input(self, pin_number, callback=None, differential=1) Set a pin as an analog input. :param pin_number: arduino pin number :param callback: callback function :param differential: This value needs to be met for a callback to be invoked. callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for analog input pins = 2 Examples: analog_input_with_time_stamps.py Notes: When an analog input message is received from Firmata, the current reported data value is compared with that of the previously reported value. If the difference, either positive or negative, is greater than the differential parameter, then the callback is invoked. This is useful when you have a \"noisy\" input that may constantly fluctuate by a small value, and you wish to ignore the noise. PymataRh refers to analog pins using the numeric portion of the pin number only. For example, pin A3 is referred to as pin 3. Data reporting via callbacks for this pin begins immediately after this method is called. DIGITAL PIN MODES set_pin_mode_digital_input def set_pin_mode_digital_input(self, pin_number, callback=None) Set a pin as a digital input. :param pin_number: arduino pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins = 0 Examples: digital_input.py digital_input_debounce.py Notes: Data reporting via callbacks for this pin begins immediately after this method is called. set_pin_mode_digital_input_pullup def set_pin_mode_digital_input_pullup(self, pin_number, callback=None) Set a pin as a digital input with pullup enabled. :param pin_number: arduino pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins with pullups enabled = 11 Example: digital_input_pullup.py Notes: Data reporting via callbacks for this pin begins immediately after this method is called. set_pin_mode_digital_output def set_pin_mode_digital_output(self, pin_number) Set a pin as a digital output pin. :param pin_number: arduino pin number Examples: digital_output.py set_pin_mode_pwm_output def set_pin_mode_pwm_output(self, pin_number) Set a pin as a pwm (analog output) pin. :param pin_number:arduino pin number Example: 1. fade.py Notes: Only specific digital pins support PWM mode. Check with the Arduino documentation to determine which pins support PWM for your board. DEVICE TYPE PIN MODES set_pin_mode_dht def set_pin_mode_dht(self, pin_number, sensor_type=22, differential=.1, callback=None): \"\"\" Configure a DHT sensor prior to operation. Up to 6 DHT sensors are supported :param pin_number: digital pin number on arduino. :param sensor_type: type of dht sensor Valid values = DHT11, DHT12, DHT22, DHT21, AM2301 :param differential: This value needs to be met for a callback to be invoked. :param callback: callback function callback: returns a data list: [pin_type, pin_number, DHT type, humidity value, temperature raw_time_stamp] The pin_type for DHT input pins = 15 ERROR CODES: If either humidity or temperature value: == -1 Configuration Error == -2 Checksum Error == -3 Timeout Error \"\"\" Examples: dht.py Notes: You may reset the differential value by calling this method again with a new differential value. set_pin_mode_i2c def set_pin_mode_i2c(self, read_delay_time=0) Establish the standard Arduino i2c pins for i2c utilization. NOTE: THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE: This method initializes Firmata for I2c operations. :param read_delay_time (in microseconds): an optional parameter, default is 0 NOTE: Callbacks are set within the individual i2c read methods of this API. See i2c_read, i2c_read_continuous, or i2c_read_restart_transmission. Example: 1. i2c_adxl345_accelerometer.py set_pin_mode_servo def set_pin_mode_servo(self, pin, min_pulse=544, max_pulse=2400) Configure a pin as a servo pin. Set pulse min, max in ms. :param pin: Servo Pin. :param min_pulse: Min pulse width in ms. :param max_pulse: Max pulse width in ms. Example: 1. servo.py set_pin_mode_sonar def set_pin_mode_sonar(self, trigger_pin, echo_pin, callback=None, timeout=80000) This is a FirmataExpress feature. Configure the pins, ping interval and maximum distance for an HC-SR04 type device. Up to a maximum of 6 SONAR devices is supported. If the maximum is exceeded a message is sent to the console and the request is ignored. NOTE: data is measured in centimeters. Callback is called only when the latest value received is different than the previous. :param trigger_pin: The pin number of for the trigger (transmitter). :param echo_pin: The pin number for the received echo. :param callback: optional callback function to report sonar data changes :param timeout: a tuning parameter. 80000UL equals 80ms. callback returns a data list: [pin_type, trigger_pin_number, distance_value (in cm), raw_time_stamp] The pin_type for sonar pins = 12 Example: 1. hc-sr04_distance_sensor.py The MPU9250 and INA219 Devices To initialize these devices, please see Configuring And Reading The MPU9250 9DOF Device and Configuring And Reading The INA219 Current, Shunt, And Power Monitor. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Setting Pin Modes"},{"location":"pin_modes/#introduction","text":"Independent of what the Robot HAT MM1 pin names suggest, pins may be able to be configured to operate in one of several modes. The modes available to any given pin is dependent upon pin type. For the pin modes available to a given pin, please refer to the pin table on the first page of this document. For example, a digital pin may be configured for input, output, and for some digital pins, PWM output operation. When setting a pin mode, a validity check is performed for the specified pin. If not, a RuntimeError exception is raised. Analog input pins are even more flexible. They may be configured for analog input, digital input, or digital output operation. PymataRh requires that before using a pin, its mode must be explicitly set. This is accomplished using one of the pymata_rh mode setting methods. In this section, the methods to set pin modes are presented. For each API method, a link to an example is provided.","title":"Introduction"},{"location":"pin_modes/#analog-pin-mode","text":"","title":"ANALOG PIN MODE"},{"location":"pin_modes/#set_pin_mode_analog_input","text":"def set_pin_mode_analog_input(self, pin_number, callback=None, differential=1) Set a pin as an analog input. :param pin_number: arduino pin number :param callback: callback function :param differential: This value needs to be met for a callback to be invoked. callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for analog input pins = 2 Examples: analog_input_with_time_stamps.py Notes: When an analog input message is received from Firmata, the current reported data value is compared with that of the previously reported value. If the difference, either positive or negative, is greater than the differential parameter, then the callback is invoked. This is useful when you have a \"noisy\" input that may constantly fluctuate by a small value, and you wish to ignore the noise. PymataRh refers to analog pins using the numeric portion of the pin number only. For example, pin A3 is referred to as pin 3. Data reporting via callbacks for this pin begins immediately after this method is called.","title":"set_pin_mode_analog_input"},{"location":"pin_modes/#digital-pin-modes","text":"","title":"DIGITAL PIN MODES"},{"location":"pin_modes/#set_pin_mode_digital_input","text":"def set_pin_mode_digital_input(self, pin_number, callback=None) Set a pin as a digital input. :param pin_number: arduino pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins = 0 Examples: digital_input.py digital_input_debounce.py Notes: Data reporting via callbacks for this pin begins immediately after this method is called.","title":"set_pin_mode_digital_input"},{"location":"pin_modes/#set_pin_mode_digital_input_pullup","text":"def set_pin_mode_digital_input_pullup(self, pin_number, callback=None) Set a pin as a digital input with pullup enabled. :param pin_number: arduino pin number :param callback: callback function callback returns a data list: [pin_type, pin_number, pin_value, raw_time_stamp] The pin_type for digital input pins with pullups enabled = 11 Example: digital_input_pullup.py Notes: Data reporting via callbacks for this pin begins immediately after this method is called.","title":"set_pin_mode_digital_input_pullup"},{"location":"pin_modes/#set_pin_mode_digital_output","text":"def set_pin_mode_digital_output(self, pin_number) Set a pin as a digital output pin. :param pin_number: arduino pin number Examples: digital_output.py","title":"set_pin_mode_digital_output"},{"location":"pin_modes/#set_pin_mode_pwm_output","text":"def set_pin_mode_pwm_output(self, pin_number) Set a pin as a pwm (analog output) pin. :param pin_number:arduino pin number Example: 1. fade.py Notes: Only specific digital pins support PWM mode. Check with the Arduino documentation to determine which pins support PWM for your board.","title":"set_pin_mode_pwm_output"},{"location":"pin_modes/#device-type-pin-modes","text":"","title":"DEVICE TYPE PIN MODES"},{"location":"pin_modes/#set_pin_mode_dht","text":"def set_pin_mode_dht(self, pin_number, sensor_type=22, differential=.1, callback=None): \"\"\" Configure a DHT sensor prior to operation. Up to 6 DHT sensors are supported :param pin_number: digital pin number on arduino. :param sensor_type: type of dht sensor Valid values = DHT11, DHT12, DHT22, DHT21, AM2301 :param differential: This value needs to be met for a callback to be invoked. :param callback: callback function callback: returns a data list: [pin_type, pin_number, DHT type, humidity value, temperature raw_time_stamp] The pin_type for DHT input pins = 15 ERROR CODES: If either humidity or temperature value: == -1 Configuration Error == -2 Checksum Error == -3 Timeout Error \"\"\" Examples: dht.py Notes: You may reset the differential value by calling this method again with a new differential value.","title":"set_pin_mode_dht"},{"location":"pin_modes/#set_pin_mode_i2c","text":"def set_pin_mode_i2c(self, read_delay_time=0) Establish the standard Arduino i2c pins for i2c utilization. NOTE: THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE: This method initializes Firmata for I2c operations. :param read_delay_time (in microseconds): an optional parameter, default is 0 NOTE: Callbacks are set within the individual i2c read methods of this API. See i2c_read, i2c_read_continuous, or i2c_read_restart_transmission. Example: 1. i2c_adxl345_accelerometer.py","title":"set_pin_mode_i2c"},{"location":"pin_modes/#set_pin_mode_servo","text":"def set_pin_mode_servo(self, pin, min_pulse=544, max_pulse=2400) Configure a pin as a servo pin. Set pulse min, max in ms. :param pin: Servo Pin. :param min_pulse: Min pulse width in ms. :param max_pulse: Max pulse width in ms. Example: 1. servo.py","title":"set_pin_mode_servo"},{"location":"pin_modes/#set_pin_mode_sonar","text":"def set_pin_mode_sonar(self, trigger_pin, echo_pin, callback=None, timeout=80000) This is a FirmataExpress feature. Configure the pins, ping interval and maximum distance for an HC-SR04 type device. Up to a maximum of 6 SONAR devices is supported. If the maximum is exceeded a message is sent to the console and the request is ignored. NOTE: data is measured in centimeters. Callback is called only when the latest value received is different than the previous. :param trigger_pin: The pin number of for the trigger (transmitter). :param echo_pin: The pin number for the received echo. :param callback: optional callback function to report sonar data changes :param timeout: a tuning parameter. 80000UL equals 80ms. callback returns a data list: [pin_type, trigger_pin_number, distance_value (in cm), raw_time_stamp] The pin_type for sonar pins = 12 Example: 1. hc-sr04_distance_sensor.py","title":"set_pin_mode_sonar"},{"location":"pin_modes/#the-mpu9250-and-ina219-devices","text":"To initialize these devices, please see Configuring And Reading The MPU9250 9DOF Device and Configuring And Reading The INA219 Current, Shunt, And Power Monitor. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"The MPU9250 and INA219 Devices"},{"location":"polling/","text":"Understanding Input Data Collection And Reporting Firmata Input Data Collection and Reporting FirmataExpress polls all input pins within the loop method of the sketch. Notification messages containing the pin number, pin type, and current data value for the pin are constructed and then transmitted to pymata_rh over the serial link. Firmata Polls For Data Changes Digital Input For digital input pins, all the pins are polled with each iteration of the FirmataExpress loop function, with no delays. When the state of a pin has changed, Firmata creates a notification message and transmits it over the serial link to pymata_rh. Analog Input For analog input pins, each pin is polled, and its current value is reported, regardless of change. All analog input pins are nominally polled every 19 milliseconds. I2C Input Unlike digital and analog inputs, most I2C devices report values only when a read request is issued to the i2c device. For these i2c devices, a read request results in a single reply. Some i2c devices may be placed in a continuous read mode. In this mode, the i2c device automatically sends update notifications, usually as quickly as possible. When in continuous i2c mode, the Firmata loop retrieves cached responses at a nominal polling rate of 19 milliseconds. Sonar (HC-SR04) Input FirmataExpress supports HC-SR04 type distance sensors. The Firmata loop polls each device and reports its current value regardless of change. The polling rate is nominally every 40 milliseconds for HC-SR04 type devices. DHT Temperature/Humidity Sensor Input Both DHT 11 and 22 temperature humidity sensors are supported. The polling rate is approximately 2 seconds for each sensor because DHT devices require a long data capture time. PymataRh Input Data Processing Pymata_rh Polling For Input Data Changes As pymata_rh receives input data notifications, it caches the data in internal data structures. These data structures retain the value reported as well as the time of occurrence. The application may query or poll these data structures to obtain the latest data updates for a given pin. The pymata_rh API methods that implement polling are: analog_read digital_read i2c_read_saved_data dht_read sonar_read mpu_9250_read_saved_data ina_read_bus_voltage_last ina_read_bus_current_last ina_read_supply_voltage_last ina_read_shunt_voltage_last ina_read_power_last Using Callbacks Instead Of Polling Callback notification is much more efficient than using polling when dealing with input data. What is a callback? A callback is simply a function or method written by you that is registered with pymata_rh to automatically and immediately notify your application of data changes. Functions That Can Be Registered For Callbacks You may optionally register callback functions when using any of the following pymata_rh API methods: set_pin_mode_analog_input set_pin_mode_digital_input set_pin_mode_digital_input_pullup set_pin_mode_dht set_pin_mode_sonar enable_analog_reporting (an alias for set_pin_mode_analog_input) i2c_read i2c_read_continuous i2c_read_restart_transmission mpu_9250_read_data (callback is established in mpu_9250_initialize) ina219 - a single callback is established in ina_initialize and is shared by all of the following: * ina_read_bus_voltage * ina_read_bus_current * ina_read_supply_voltage * ina_read_shunt_voltage * ina_read_power Callback Function Scope The scope of a callback is extremely flexible. You may register a callback function: On a one to one basis for the desired input. Or you may group pins of a single type, such as analog input or digital input, Or even have a single callback function handle all input data notifications. The data that pymata_rh sends to the callback provides all the information your program needs to differentiate one callback from another. You may also use callbacks with some pins while using polling for others. Polling is available for all input pins whether callbacks are in use or not. The Callback Return Values A callback function is specified to accept a single input parameter, typically named data . The input parameter will be filled with a list when pymata_rh invokes the callback. A description of what is contained in the list is provided in the reference API. def my_callback(data): \"\"\" :param data: a list containing pin type, pin number, data value and time-stamp \"\"\" # Your code goes here to process the data For example, the callback data for a digital input pin is structured as follows: [pin_type, pin_number, pin_value, raw_time_stamp] Pin Type Identifiers All callbacks provide a pin_type as the first value in the list. A pin_type allows you to quickly identify the source of the callback. In addition, all callbacks provide a raw time-stamp as the last entry of the list. Other fields are specific to the callback type. INPUT = 0x00 # pin set as input OUTPUT = 0x01 # pin set as output ANALOG = 0x02 # analog pin in analogInput mode PWM = 0x03 # digital pin in PWM output mode SERVO = 0x04 # digital pin in Servo output mode I2C = 0x06 # pin included in I2C setup PULLUP = 0x0b # Any pin in pullup mode SONAR = 0x0c # Any pin in SONAR mode DHT = 0x0f # DHT sensor MPU9250 = 0x10 # mpu INA219 = 0x11 # current sensor TIP : You should keep callback functions as short as possible. If processing callback data within the callback function results in blocking your application, you may wish to consider spawning a separate processing thread. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Understanding Input Data Collection"},{"location":"polling/#understanding-input-data-collection-and-reporting","text":"","title":"Understanding Input Data Collection And Reporting"},{"location":"polling/#firmata-input-data-collection-and-reporting","text":"FirmataExpress polls all input pins within the loop method of the sketch. Notification messages containing the pin number, pin type, and current data value for the pin are constructed and then transmitted to pymata_rh over the serial link.","title":"Firmata Input Data Collection and Reporting"},{"location":"polling/#firmata-polls-for-data-changes","text":"","title":"Firmata Polls For Data Changes"},{"location":"polling/#digital-input","text":"For digital input pins, all the pins are polled with each iteration of the FirmataExpress loop function, with no delays. When the state of a pin has changed, Firmata creates a notification message and transmits it over the serial link to pymata_rh.","title":"Digital Input"},{"location":"polling/#analog-input","text":"For analog input pins, each pin is polled, and its current value is reported, regardless of change. All analog input pins are nominally polled every 19 milliseconds.","title":"Analog Input"},{"location":"polling/#i2c-input","text":"Unlike digital and analog inputs, most I2C devices report values only when a read request is issued to the i2c device. For these i2c devices, a read request results in a single reply. Some i2c devices may be placed in a continuous read mode. In this mode, the i2c device automatically sends update notifications, usually as quickly as possible. When in continuous i2c mode, the Firmata loop retrieves cached responses at a nominal polling rate of 19 milliseconds.","title":"I2C Input"},{"location":"polling/#sonar-hc-sr04-input","text":"FirmataExpress supports HC-SR04 type distance sensors. The Firmata loop polls each device and reports its current value regardless of change. The polling rate is nominally every 40 milliseconds for HC-SR04 type devices.","title":"Sonar (HC-SR04) Input"},{"location":"polling/#dht-temperaturehumidity-sensor-input","text":"Both DHT 11 and 22 temperature humidity sensors are supported. The polling rate is approximately 2 seconds for each sensor because DHT devices require a long data capture time.","title":"DHT Temperature/Humidity Sensor Input"},{"location":"polling/#pymatarh-input-data-processing","text":"","title":"PymataRh Input Data Processing"},{"location":"polling/#pymata_rh-polling-for-input-data-changes","text":"As pymata_rh receives input data notifications, it caches the data in internal data structures. These data structures retain the value reported as well as the time of occurrence. The application may query or poll these data structures to obtain the latest data updates for a given pin. The pymata_rh API methods that implement polling are: analog_read digital_read i2c_read_saved_data dht_read sonar_read mpu_9250_read_saved_data ina_read_bus_voltage_last ina_read_bus_current_last ina_read_supply_voltage_last ina_read_shunt_voltage_last ina_read_power_last","title":"Pymata_rh Polling For Input Data Changes"},{"location":"polling/#using-callbacks-instead-of-polling","text":"Callback notification is much more efficient than using polling when dealing with input data. What is a callback? A callback is simply a function or method written by you that is registered with pymata_rh to automatically and immediately notify your application of data changes.","title":"Using Callbacks Instead Of Polling"},{"location":"polling/#functions-that-can-be-registered-for-callbacks","text":"You may optionally register callback functions when using any of the following pymata_rh API methods: set_pin_mode_analog_input set_pin_mode_digital_input set_pin_mode_digital_input_pullup set_pin_mode_dht set_pin_mode_sonar enable_analog_reporting (an alias for set_pin_mode_analog_input) i2c_read i2c_read_continuous i2c_read_restart_transmission mpu_9250_read_data (callback is established in mpu_9250_initialize) ina219 - a single callback is established in ina_initialize and is shared by all of the following: * ina_read_bus_voltage * ina_read_bus_current * ina_read_supply_voltage * ina_read_shunt_voltage * ina_read_power","title":"Functions That Can Be Registered For Callbacks"},{"location":"polling/#callback-function-scope","text":"The scope of a callback is extremely flexible. You may register a callback function: On a one to one basis for the desired input. Or you may group pins of a single type, such as analog input or digital input, Or even have a single callback function handle all input data notifications. The data that pymata_rh sends to the callback provides all the information your program needs to differentiate one callback from another. You may also use callbacks with some pins while using polling for others. Polling is available for all input pins whether callbacks are in use or not.","title":"Callback Function Scope"},{"location":"polling/#the-callback-return-values","text":"A callback function is specified to accept a single input parameter, typically named data . The input parameter will be filled with a list when pymata_rh invokes the callback. A description of what is contained in the list is provided in the reference API. def my_callback(data): \"\"\" :param data: a list containing pin type, pin number, data value and time-stamp \"\"\" # Your code goes here to process the data For example, the callback data for a digital input pin is structured as follows: [pin_type, pin_number, pin_value, raw_time_stamp]","title":"The Callback Return Values"},{"location":"polling/#pin-type-identifiers","text":"All callbacks provide a pin_type as the first value in the list. A pin_type allows you to quickly identify the source of the callback. In addition, all callbacks provide a raw time-stamp as the last entry of the list. Other fields are specific to the callback type. INPUT = 0x00 # pin set as input OUTPUT = 0x01 # pin set as output ANALOG = 0x02 # analog pin in analogInput mode PWM = 0x03 # digital pin in PWM output mode SERVO = 0x04 # digital pin in Servo output mode I2C = 0x06 # pin included in I2C setup PULLUP = 0x0b # Any pin in pullup mode SONAR = 0x0c # Any pin in SONAR mode DHT = 0x0f # DHT sensor MPU9250 = 0x10 # mpu INA219 = 0x11 # current sensor TIP : You should keep callback functions as short as possible. If processing callback data within the callback function results in blocking your application, you may wish to consider spawning a separate processing thread. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Pin Type Identifiers"},{"location":"python_3_verify/","text":"How To Verify The Python 3 Version Installed To check that you have Python 3.7 or higher installed open a command window and type: python3 -V For Windows, you may need to type: python -V The Python version will be displayed: python3 Python 3.7.2 (default, Dec 31 2018, 14:25:33) [GCC 8.2.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> For Windows users, this may look something like: C:\\Users\\Alan>python Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> If you need to install Python 3.7 or greater, please go to the next section. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Verifying Python 3 Version"},{"location":"python_3_verify/#how-to-verify-the-python-3-version-installed","text":"To check that you have Python 3.7 or higher installed open a command window and type: python3 -V For Windows, you may need to type: python -V The Python version will be displayed: python3 Python 3.7.2 (default, Dec 31 2018, 14:25:33) [GCC 8.2.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> For Windows users, this may look something like: C:\\Users\\Alan>python Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> If you need to install Python 3.7 or greater, please go to the next section. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"How To Verify The Python 3 Version Installed"},{"location":"python_install/","text":"INSTALLING PYTHON 3.7 OR GREATER Windows Users To install Python 3.x, go to the Python home page, and download the latest Python 3 distribution for your operating system. During the installation process, if there is a checkbox to add Python 3.x to your path, make sure it is checked before proceeding with the installation. Linux Users Raspberry Pi Raspbian Users If your copy of Raspbian is using Python 3.7 or greater, you should be all set to proceed. Ubuntu and Other Debian Based Linux Distributions You may need to install pip3. To check, open a terminal and type: which pip3 If a path to pip3 is not reported, you will need to install it. Open a terminal window and type: sudo apt-get install pip3-python You should then make sure you have the latest version by typing: sudo pip3 install -U pip To communicate with the RoboHAT, you may need to add your login to the dialout group. To do so, type the following: sudo adduser $USER dialout Also, you may need to add tkinter for the GUI demo to work. To add tkinter, type the following: sudo apt-get install python3-tk For All Other Linux Distributions Refer to your distribution's instructions. Mac Users Install Python 3.7.x from https://www.python.org/downloads/ or via homebrew Download get-pip.py from https://bootstrap.pypa.io/get-pip.py and install (this should already be installed if python was installed from python.org or homebrew): curl -O https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py Verify The Python Installation Use the procedure shown here to verify that you have successfully installed Python 3.7 on your computer. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Python 3 Installation"},{"location":"python_install/#installing-python-37-or-greater","text":"","title":"INSTALLING PYTHON 3.7 OR GREATER"},{"location":"python_install/#windows-users","text":"To install Python 3.x, go to the Python home page, and download the latest Python 3 distribution for your operating system. During the installation process, if there is a checkbox to add Python 3.x to your path, make sure it is checked before proceeding with the installation.","title":"Windows Users"},{"location":"python_install/#linux-users","text":"","title":"Linux Users"},{"location":"python_install/#raspberry-pi-raspbian-users","text":"If your copy of Raspbian is using Python 3.7 or greater, you should be all set to proceed.","title":"Raspberry Pi Raspbian Users"},{"location":"python_install/#ubuntu-and-other-debian-based-linux-distributions","text":"You may need to install pip3. To check, open a terminal and type: which pip3 If a path to pip3 is not reported, you will need to install it. Open a terminal window and type: sudo apt-get install pip3-python You should then make sure you have the latest version by typing: sudo pip3 install -U pip To communicate with the RoboHAT, you may need to add your login to the dialout group. To do so, type the following: sudo adduser $USER dialout Also, you may need to add tkinter for the GUI demo to work. To add tkinter, type the following: sudo apt-get install python3-tk","title":"Ubuntu and Other Debian Based Linux Distributions"},{"location":"python_install/#for-all-other-linux-distributions","text":"Refer to your distribution's instructions.","title":"For All Other Linux Distributions"},{"location":"python_install/#mac-users","text":"Install Python 3.7.x from https://www.python.org/downloads/ or via homebrew Download get-pip.py from https://bootstrap.pypa.io/get-pip.py and install (this should already be installed if python was installed from python.org or homebrew): curl -O https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py","title":"Mac Users"},{"location":"python_install/#verify-the-python-installation","text":"Use the procedure shown here to verify that you have successfully installed Python 3.7 on your computer. Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Verify The Python Installation"},{"location":"report_requests/","text":"Informational Reports All of the following methods are synchronous. The methods block until they return. get_firmware_version def get_firmware_version(self) This method retrieves the Firmata firmware version :returns: Firmata firmware version Example: retrieve_firmware_version.py Notes: This report will return the major and minor numbers of the release and the firmware name. get_pin_state def get_pin_state(self, pin): \"\"\" This method retrieves a pin state report for the specified pin. Pin modes reported: INPUT = 0x00 # digital input mode OUTPUT = 0x01 # digital output mode ANALOG = 0x02 # analog input mode PWM = 0x03 # digital pin in PWM output mode SERVO = 0x04 # digital pin in Servo output mode I2C = 0x06 # pin included in I2C setup PULLUP = 0x0b # digital pin in input pullup mode SONAR = 0x0c # digital pin in SONAR mode DHT = 0x0f :param pin: Pin of interest :returns: pin state report \"\"\" Example: retrieve_pin_state.py Notes: Refer to the Firmata Protocol specification for an explanation of the report data.] get_protocol_version def get_protocol_version(self) This method returns the major and minor values for the protocol version, i.e. 2.5 :returns: Firmata protocol version Example: retrieve_protocol_version.py get_pymata_version def get_pymata_version(self) This method retrieves the PyMata Express version number :returns: PyMata Express version number. Example: retrieve_pymata_version.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Report Requests"},{"location":"report_requests/#informational-reports","text":"All of the following methods are synchronous. The methods block until they return.","title":"Informational Reports"},{"location":"report_requests/#get_firmware_version","text":"def get_firmware_version(self) This method retrieves the Firmata firmware version :returns: Firmata firmware version Example: retrieve_firmware_version.py Notes: This report will return the major and minor numbers of the release and the firmware name.","title":"get_firmware_version"},{"location":"report_requests/#get_pin_state","text":"def get_pin_state(self, pin): \"\"\" This method retrieves a pin state report for the specified pin. Pin modes reported: INPUT = 0x00 # digital input mode OUTPUT = 0x01 # digital output mode ANALOG = 0x02 # analog input mode PWM = 0x03 # digital pin in PWM output mode SERVO = 0x04 # digital pin in Servo output mode I2C = 0x06 # pin included in I2C setup PULLUP = 0x0b # digital pin in input pullup mode SONAR = 0x0c # digital pin in SONAR mode DHT = 0x0f :param pin: Pin of interest :returns: pin state report \"\"\" Example: retrieve_pin_state.py Notes: Refer to the Firmata Protocol specification for an explanation of the report data.]","title":"get_pin_state"},{"location":"report_requests/#get_protocol_version","text":"def get_protocol_version(self) This method returns the major and minor values for the protocol version, i.e. 2.5 :returns: Firmata protocol version Example: retrieve_protocol_version.py","title":"get_protocol_version"},{"location":"report_requests/#get_pymata_version","text":"def get_pymata_version(self) This method retrieves the PyMata Express version number :returns: PyMata Express version number. Example: retrieve_pymata_version.py Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"get_pymata_version"},{"location":"upgrade/","text":"Getting Notifications Of A New Release And How To Upgrade Get Notifications For New Releases From Github If you have an account on GitHub, you can enable automatic notification when a new release is published. If you don't have an account, you may create one on the GitHub site. To enable automatic notifications, go the pymata_rh repository page, click on the drop-down list and select \"Releases Only.\" When a new release is published, you will receive an email from GitHub. Upgrading To The Latest Version Whenever a new release is published, it is available on the Python Package Index (PyPI). To upgrade, open a terminal window. For Windows users type: pip install pymata_rh --upgrade For Linux and macOS users type: sudo pip3 install pymata_rh --upgrade Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Upgrading Pymata_rh To The Latest Version"},{"location":"upgrade/#getting-notifications-of-a-new-release-and-how-to-upgrade","text":"","title":"Getting Notifications Of A New Release And How To Upgrade"},{"location":"upgrade/#get-notifications-for-new-releases-from-github","text":"If you have an account on GitHub, you can enable automatic notification when a new release is published. If you don't have an account, you may create one on the GitHub site. To enable automatic notifications, go the pymata_rh repository page, click on the drop-down list and select \"Releases Only.\" When a new release is published, you will receive an email from GitHub.","title":"Get Notifications For New Releases From Github"},{"location":"upgrade/#upgrading-to-the-latest-version","text":"Whenever a new release is published, it is available on the Python Package Index (PyPI). To upgrade, open a terminal window. For Windows users type: pip install pymata_rh --upgrade For Linux and macOS users type: sudo pip3 install pymata_rh --upgrade Copyright (C) 2020 Alan Yorinks. All Rights Reserved.","title":"Upgrading To The Latest Version"}]}